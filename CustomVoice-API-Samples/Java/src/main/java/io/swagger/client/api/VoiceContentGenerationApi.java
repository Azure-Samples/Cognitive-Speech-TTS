/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AllVoicesResponseV3;
import io.swagger.client.model.DownloadTasksDefinitionV3;
import io.swagger.client.model.DownloadTasksResponseV3;
import io.swagger.client.model.ErrorContent;
import io.swagger.client.model.GetTasksReponseV3;
import io.swagger.client.model.ICreateFolderDefinitionV3;
import io.swagger.client.model.ICreateOpinionDefinitionV3;
import io.swagger.client.model.IEditFileDefinitionV3;
import io.swagger.client.model.IEditFolderDefinitionV3;
import io.swagger.client.model.TaskOpinionViewModel;
import java.util.UUID;
import io.swagger.client.model.UploadTaskFilesDefinitionV3;
import io.swagger.client.model.UploadTaskFilesResponseV3;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoiceContentGenerationApi {
    private ApiClient apiClient;

    public VoiceContentGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoiceContentGenerationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFolder
     * @param createFolderDefinition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFolderCall(ICreateFolderDefinitionV3 createFolderDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createFolderDefinition;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/createfolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFolderValidateBeforeCall(ICreateFolderDefinitionV3 createFolderDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createFolderDefinition' is set
        if (createFolderDefinition == null) {
            throw new ApiException("Missing the required parameter 'createFolderDefinition' when calling createFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = createFolderCall(createFolderDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new folder.
     * 
     * @param createFolderDefinition  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createFolder(ICreateFolderDefinitionV3 createFolderDefinition) throws ApiException {
        createFolderWithHttpInfo(createFolderDefinition);
    }

    /**
     * Create new folder.
     * 
     * @param createFolderDefinition  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createFolderWithHttpInfo(ICreateFolderDefinitionV3 createFolderDefinition) throws ApiException {
        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(createFolderDefinition, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create new folder. (asynchronously)
     * 
     * @param createFolderDefinition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFolderAsync(ICreateFolderDefinitionV3 createFolderDefinition, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(createFolderDefinition, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createOpinion
     * @param createOpinionDefinition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOpinionCall(ICreateOpinionDefinitionV3 createOpinionDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createOpinionDefinition;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/createopinion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOpinionValidateBeforeCall(ICreateOpinionDefinitionV3 createOpinionDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createOpinionDefinition' is set
        if (createOpinionDefinition == null) {
            throw new ApiException("Missing the required parameter 'createOpinionDefinition' when calling createOpinion(Async)");
        }
        

        com.squareup.okhttp.Call call = createOpinionCall(createOpinionDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create opinion for task file.
     * 
     * @param createOpinionDefinition  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createOpinion(ICreateOpinionDefinitionV3 createOpinionDefinition) throws ApiException {
        createOpinionWithHttpInfo(createOpinionDefinition);
    }

    /**
     * Create opinion for task file.
     * 
     * @param createOpinionDefinition  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createOpinionWithHttpInfo(ICreateOpinionDefinitionV3 createOpinionDefinition) throws ApiException {
        com.squareup.okhttp.Call call = createOpinionValidateBeforeCall(createOpinionDefinition, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create opinion for task file. (asynchronously)
     * 
     * @param createOpinionDefinition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOpinionAsync(ICreateOpinionDefinitionV3 createOpinionDefinition, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOpinionValidateBeforeCall(createOpinionDefinition, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTasks
     * @param taskIdList  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTasksCall(List<UUID> taskIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskIdList;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/deletetasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTasksValidateBeforeCall(List<UUID> taskIdList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskIdList' is set
        if (taskIdList == null) {
            throw new ApiException("Missing the required parameter 'taskIdList' when calling deleteTasks(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTasksCall(taskIdList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete task recursively.
     * 
     * @param taskIdList  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTasks(List<UUID> taskIdList) throws ApiException {
        deleteTasksWithHttpInfo(taskIdList);
    }

    /**
     * Delete task recursively.
     * 
     * @param taskIdList  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTasksWithHttpInfo(List<UUID> taskIdList) throws ApiException {
        com.squareup.okhttp.Call call = deleteTasksValidateBeforeCall(taskIdList, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete task recursively. (asynchronously)
     * 
     * @param taskIdList  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTasksAsync(List<UUID> taskIdList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTasksValidateBeforeCall(taskIdList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for downloadTasks
     * @param downloadDefinition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadTasksCall(DownloadTasksDefinitionV3 downloadDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = downloadDefinition;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/downloadtasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadTasksValidateBeforeCall(DownloadTasksDefinitionV3 downloadDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'downloadDefinition' is set
        if (downloadDefinition == null) {
            throw new ApiException("Missing the required parameter 'downloadDefinition' when calling downloadTasks(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadTasksCall(downloadDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download tasks with given format
     * 
     * @param downloadDefinition  (required)
     * @return DownloadTasksResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DownloadTasksResponseV3 downloadTasks(DownloadTasksDefinitionV3 downloadDefinition) throws ApiException {
        ApiResponse<DownloadTasksResponseV3> resp = downloadTasksWithHttpInfo(downloadDefinition);
        return resp.getData();
    }

    /**
     * Download tasks with given format
     * 
     * @param downloadDefinition  (required)
     * @return ApiResponse&lt;DownloadTasksResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DownloadTasksResponseV3> downloadTasksWithHttpInfo(DownloadTasksDefinitionV3 downloadDefinition) throws ApiException {
        com.squareup.okhttp.Call call = downloadTasksValidateBeforeCall(downloadDefinition, null, null);
        Type localVarReturnType = new TypeToken<DownloadTasksResponseV3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download tasks with given format (asynchronously)
     * 
     * @param downloadDefinition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadTasksAsync(DownloadTasksDefinitionV3 downloadDefinition, final ApiCallback<DownloadTasksResponseV3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadTasksValidateBeforeCall(downloadDefinition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DownloadTasksResponseV3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editFile
     * @param editFileDefinition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editFileCall(IEditFileDefinitionV3 editFileDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = editFileDefinition;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/editfile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editFileValidateBeforeCall(IEditFileDefinitionV3 editFileDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'editFileDefinition' is set
        if (editFileDefinition == null) {
            throw new ApiException("Missing the required parameter 'editFileDefinition' when calling editFile(Async)");
        }
        

        com.squareup.okhttp.Call call = editFileCall(editFileDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit file,like rename,change status,change ssml.
     * 
     * @param editFileDefinition  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editFile(IEditFileDefinitionV3 editFileDefinition) throws ApiException {
        editFileWithHttpInfo(editFileDefinition);
    }

    /**
     * Edit file,like rename,change status,change ssml.
     * 
     * @param editFileDefinition  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editFileWithHttpInfo(IEditFileDefinitionV3 editFileDefinition) throws ApiException {
        com.squareup.okhttp.Call call = editFileValidateBeforeCall(editFileDefinition, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit file,like rename,change status,change ssml. (asynchronously)
     * 
     * @param editFileDefinition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editFileAsync(IEditFileDefinitionV3 editFileDefinition, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editFileValidateBeforeCall(editFileDefinition, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editFolder
     * @param editFolderlDefinition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editFolderCall(IEditFolderDefinitionV3 editFolderlDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = editFolderlDefinition;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/editfolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editFolderValidateBeforeCall(IEditFolderDefinitionV3 editFolderlDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'editFolderlDefinition' is set
        if (editFolderlDefinition == null) {
            throw new ApiException("Missing the required parameter 'editFolderlDefinition' when calling editFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = editFolderCall(editFolderlDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit folder,like rename it.
     * 
     * @param editFolderlDefinition  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editFolder(IEditFolderDefinitionV3 editFolderlDefinition) throws ApiException {
        editFolderWithHttpInfo(editFolderlDefinition);
    }

    /**
     * Edit folder,like rename it.
     * 
     * @param editFolderlDefinition  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editFolderWithHttpInfo(IEditFolderDefinitionV3 editFolderlDefinition) throws ApiException {
        com.squareup.okhttp.Call call = editFolderValidateBeforeCall(editFolderlDefinition, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit folder,like rename it. (asynchronously)
     * 
     * @param editFolderlDefinition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editFolderAsync(IEditFolderDefinitionV3 editFolderlDefinition, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editFolderValidateBeforeCall(editFolderlDefinition, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllVoices
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllVoicesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/allvoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllVoicesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllVoicesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all voices info belong to current subscription.
     * 
     * @return List&lt;AllVoicesResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AllVoicesResponseV3> getAllVoices() throws ApiException {
        ApiResponse<List<AllVoicesResponseV3>> resp = getAllVoicesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all voices info belong to current subscription.
     * 
     * @return ApiResponse&lt;List&lt;AllVoicesResponseV3&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AllVoicesResponseV3>> getAllVoicesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllVoicesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<AllVoicesResponseV3>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all voices info belong to current subscription. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllVoicesAsync(final ApiCallback<List<AllVoicesResponseV3>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllVoicesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AllVoicesResponseV3>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOpinions
     * @param fileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOpinionsCall(UUID fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/getopinions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileId", fileId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOpinionsValidateBeforeCall(UUID fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getOpinions(Async)");
        }
        

        com.squareup.okhttp.Call call = getOpinionsCall(fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get opinions by task file id.
     * 
     * @param fileId  (required)
     * @return List&lt;TaskOpinionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaskOpinionViewModel> getOpinions(UUID fileId) throws ApiException {
        ApiResponse<List<TaskOpinionViewModel>> resp = getOpinionsWithHttpInfo(fileId);
        return resp.getData();
    }

    /**
     * Get opinions by task file id.
     * 
     * @param fileId  (required)
     * @return ApiResponse&lt;List&lt;TaskOpinionViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaskOpinionViewModel>> getOpinionsWithHttpInfo(UUID fileId) throws ApiException {
        com.squareup.okhttp.Call call = getOpinionsValidateBeforeCall(fileId, null, null);
        Type localVarReturnType = new TypeToken<List<TaskOpinionViewModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get opinions by task file id. (asynchronously)
     * 
     * @param fileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOpinionsAsync(UUID fileId, final ApiCallback<List<TaskOpinionViewModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOpinionsValidateBeforeCall(fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaskOpinionViewModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskItems
     * @param parentFolderId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskItemsCall(UUID parentFolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/gettasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentFolderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentFolderId", parentFolderId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskItemsValidateBeforeCall(UUID parentFolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaskItemsCall(parentFolderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get task items under specified parent folder id. For root level, parentFolderId can be null
     * 
     * @param parentFolderId  (optional)
     * @return GetTasksReponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTasksReponseV3 getTaskItems(UUID parentFolderId) throws ApiException {
        ApiResponse<GetTasksReponseV3> resp = getTaskItemsWithHttpInfo(parentFolderId);
        return resp.getData();
    }

    /**
     * Get task items under specified parent folder id. For root level, parentFolderId can be null
     * 
     * @param parentFolderId  (optional)
     * @return ApiResponse&lt;GetTasksReponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTasksReponseV3> getTaskItemsWithHttpInfo(UUID parentFolderId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskItemsValidateBeforeCall(parentFolderId, null, null);
        Type localVarReturnType = new TypeToken<GetTasksReponseV3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get task items under specified parent folder id. For root level, parentFolderId can be null (asynchronously)
     * 
     * @param parentFolderId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskItemsAsync(UUID parentFolderId, final ApiCallback<GetTasksReponseV3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskItemsValidateBeforeCall(parentFolderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTasksReponseV3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadTaskFiles
     * @param uploadFilesDefinition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadTaskFilesCall(UploadTaskFilesDefinitionV3 uploadFilesDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = uploadFilesDefinition;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/VoiceContentGeneration/uploadfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadTaskFilesValidateBeforeCall(UploadTaskFilesDefinitionV3 uploadFilesDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uploadFilesDefinition' is set
        if (uploadFilesDefinition == null) {
            throw new ApiException("Missing the required parameter 'uploadFilesDefinition' when calling uploadTaskFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadTaskFilesCall(uploadFilesDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload Files in batch
     * 
     * @param uploadFilesDefinition  (required)
     * @return UploadTaskFilesResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadTaskFilesResponseV3 uploadTaskFiles(UploadTaskFilesDefinitionV3 uploadFilesDefinition) throws ApiException {
        ApiResponse<UploadTaskFilesResponseV3> resp = uploadTaskFilesWithHttpInfo(uploadFilesDefinition);
        return resp.getData();
    }

    /**
     * Upload Files in batch
     * 
     * @param uploadFilesDefinition  (required)
     * @return ApiResponse&lt;UploadTaskFilesResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadTaskFilesResponseV3> uploadTaskFilesWithHttpInfo(UploadTaskFilesDefinitionV3 uploadFilesDefinition) throws ApiException {
        com.squareup.okhttp.Call call = uploadTaskFilesValidateBeforeCall(uploadFilesDefinition, null, null);
        Type localVarReturnType = new TypeToken<UploadTaskFilesResponseV3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Files in batch (asynchronously)
     * 
     * @param uploadFilesDefinition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadTaskFilesAsync(UploadTaskFilesDefinitionV3 uploadFilesDefinition, final ApiCallback<UploadTaskFilesResponseV3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadTaskFilesValidateBeforeCall(uploadFilesDefinition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadTaskFilesResponseV3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
