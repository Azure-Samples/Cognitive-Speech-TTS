/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.Response;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.ErrorContent;
import io.swagger.client.model.Voice;
import io.swagger.client.model.VoiceSynthesis;
import io.swagger.client.model.VoiceSynthesisUpdate;

public class VoiceSynthesisApi {
	private ApiClient apiClient;

	/* Add subKey */
	private String subKey;

	public VoiceSynthesisApi(String subKey, String basePath) {
		// this(Configuration.getDefaultApiClient());
		this.subKey = subKey;
		this.apiClient = new ApiClient(basePath);
	}

	public VoiceSynthesisApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for createVoiceSynthesis
	 * 
	 * @param name                    The name information (always add this string
	 *                                for any voice synthesis). (optional)
	 * @param description             Optional description information (optional)
	 * @param locale                  The locale information (always add this string
	 *                                for any voice synthesis). (optional)
	 * @param model                   The model GUID information (always add this
	 *                                string for any voice synthesis). (optional)
	 * @param properties              Optional properties of this voice synthesis
	 *                                (json serialized object with key/values, where
	 *                                all values must be strings) (optional)
	 * @param script                  The script text file of the voice synthesis.
	 *                                (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call createVoiceSynthesisCall(String name, String description, String locale,
			List<UUID> model, String outputFormat, String properties, File script,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/texttospeech/v3.0-beta1/voicesynthesis";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();
		if (name != null)
			localVarFormParams.put("name", name);
		if (description != null)
			localVarFormParams.put("description", description);
		if (locale != null)
			localVarFormParams.put("locale", locale);
		if (model != null)
			localVarFormParams.put("model", model);
		if (properties != null)
			localVarFormParams.put("properties", properties);
		if (script != null)
			localVarFormParams.put("script", script);
		if (outputFormat != null)
			localVarFormParams.put("outputFormat", outputFormat);

		final String[] localVarAccepts = {

		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "multipart/form-data"
				// "text/plain"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),
							progressListener)).build();
				}
			});
		}

		localVarHeaderParams.put("Ocp-Apim-Subscription-Key", subKey);

		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call createVoiceSynthesisValidateBeforeCall(String name, String description,
			String locale, List<UUID> model, String outputFormat, String properties, File script,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = createVoiceSynthesisCall(name, description, locale, model, outputFormat,
				properties, script, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Creates a new synthesis.
	 * 
	 * @param name        The name information (always add this string for any voice
	 *                    synthesis). (optional)
	 * @param description Optional description information (optional)
	 * @param locale      The locale information (always add this string for any
	 *                    voice synthesis). (optional)
	 * @param model       The model GUID information (always add this string for any
	 *                    voice synthesis). (optional)
	 * @param properties  Optional properties of this voice synthesis (json
	 *                    serialized object with key/values, where all values must
	 *                    be strings) (optional)
	 * @param script      The script text file of the voice synthesis. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void createVoiceSynthesis(String name, String description, String locale, List<UUID> model,
			String outputFormat, String properties, File script) throws ApiException {
		createVoiceSynthesisWithHttpInfo(name, description, locale, model, outputFormat, properties, script);
	}

	/**
	 * Creates a new synthesis.
	 * 
	 * @param name        The name information (always add this string for any voice
	 *                    synthesis). (optional)
	 * @param description Optional description information (optional)
	 * @param locale      The locale information (always add this string for any
	 *                    voice synthesis). (optional)
	 * @param model       The model GUID information (always add this string for any
	 *                    voice synthesis). (optional)
	 * @param properties  Optional properties of this voice synthesis (json
	 *                    serialized object with key/values, where all values must
	 *                    be strings) (optional)
	 * @param script      The script text file of the voice synthesis. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> createVoiceSynthesisWithHttpInfo(String name, String description, String locale,
			List<UUID> model, String outputFormat, String properties, File script) throws ApiException {
		com.squareup.okhttp.Call call = createVoiceSynthesisValidateBeforeCall(name, description, locale, model,
				outputFormat, properties, script, null, null);
		return apiClient.execute(call);
	}

	public Response NewcreateVoiceSynthesisWithHttpInfo(String name, String description, String locale,
			List<UUID> model, String outputFormat, String properties, File script) throws ApiException {
		com.squareup.okhttp.Call call = createVoiceSynthesisValidateBeforeCall(name, description, locale, model,
				outputFormat, properties, script, null, null);
		return apiClient.NewExecute(call, null);
	}

	/**
	 * Creates a new synthesis. (asynchronously)
	 * 
	 * @param name        The name information (always add this string for any voice
	 *                    synthesis). (optional)
	 * @param description Optional description information (optional)
	 * @param locale      The locale information (always add this string for any
	 *                    voice synthesis). (optional)
	 * @param model       The model GUID information (always add this string for any
	 *                    voice synthesis). (optional)
	 * @param properties  Optional properties of this voice synthesis (json
	 *                    serialized object with key/values, where all values must
	 *                    be strings) (optional)
	 * @param script      The script text file of the voice synthesis. (optional)
	 * @param callback    The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call createVoiceSynthesisAsync(String name, String description, String locale,
			List<UUID> model, String outputFormat, String properties, File script, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = createVoiceSynthesisValidateBeforeCall(name, description, locale, model,
				outputFormat, properties, script, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for deleteVoiceSynthesis
	 * 
	 * @param id                      The identifier of the synthesis. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call deleteVoiceSynthesisCall(UUID id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/texttospeech/v3.0-beta1/voicesynthesis/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {

		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),
							progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call deleteVoiceSynthesisValidateBeforeCall(UUID id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling deleteVoiceSynthesis(Async)");
		}

		com.squareup.okhttp.Call call = deleteVoiceSynthesisCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Deletes the specified voice synthesis task.
	 * 
	 * @param id The identifier of the synthesis. (required)
	 * @return ErrorContent
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ErrorContent deleteVoiceSynthesis(UUID id) throws ApiException {
		ApiResponse<ErrorContent> resp = deleteVoiceSynthesisWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * Deletes the specified voice synthesis task.
	 * 
	 * @param id The identifier of the synthesis. (required)
	 * @return ApiResponse&lt;ErrorContent&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<ErrorContent> deleteVoiceSynthesisWithHttpInfo(UUID id) throws ApiException {
		com.squareup.okhttp.Call call = deleteVoiceSynthesisValidateBeforeCall(id, null, null);
		Type localVarReturnType = new TypeToken<ErrorContent>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Deletes the specified voice synthesis task. (asynchronously)
	 * 
	 * @param id       The identifier of the synthesis. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call deleteVoiceSynthesisAsync(UUID id, final ApiCallback<ErrorContent> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = deleteVoiceSynthesisValidateBeforeCall(id, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<ErrorContent>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for getSupportedVoicesForVoiceSynthesis
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getSupportedVoicesForVoiceSynthesisCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/texttospeech/v3.0-beta1/voicesynthesis/voices";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);
		/* Add subKey */
		// localVarHeaderParams.put("Ocp-Apim-Subscription-Key", subKey);
		/*
		 * if(progressListener != null) {
		 * 
		 * client.networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
		 * 
		 * @Override public com.squareup.okhttp.Response
		 * intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
		 * com.squareup.okhttp.Response originalResponse =
		 * chain.proceed(chain.request()); return originalResponse.newBuilder()
		 * .body(new ProgressResponseBody(originalResponse.body(), progressListener))
		 * .build(); } }); }
		 */

		/* Add */
		// OkHttpClient client = apiClient.getHttpClient();
		// Authenticator authenticator = new Authenticator();
		/*
		 * apiClient.getHttpClient().setAuthenticator(new Authenticator() {
		 * 
		 * @Override public Request authenticate(Proxy proxy, Response response) throws
		 * IOException { String credential = Credentials.basic( subKey,
		 * "https://centralindia.api.cognitive.microsoft.com/sts/v1.0/issueToken");
		 * return response.request().newBuilder().header("Authorization",
		 * credential).build(); }
		 * 
		 * @Override public Request authenticateProxy(Proxy proxy, Response response)
		 * throws IOException { return null; } });
		 */

		/* Add issued token */
		// ApiResponse<String> tokenResponse= geIssuedToken();
		// String issuedToken=tokenResponse.getData();
		// localVarHeaderParams.put("Authorization", "Bearer"+issuedToken);

		localVarHeaderParams.put("Ocp-Apim-Subscription-Key", subKey);

		// String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/* Add */
	public com.squareup.okhttp.Call getIssuedTokenCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "https://centralindia.api.cognitive.microsoft.com/sts/v1.0/issueToken";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);
		/* Add subKey */
		localVarHeaderParams.put("Ocp-Apim-Subscription-Key", subKey);
		/*
		 * if(progressListener != null) {
		 * 
		 * client.networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
		 * 
		 * @Override public com.squareup.okhttp.Response
		 * intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
		 * com.squareup.okhttp.Response originalResponse =
		 * chain.proceed(chain.request()); return originalResponse.newBuilder()
		 * .body(new ProgressResponseBody(originalResponse.body(), progressListener))
		 * .build(); } }); }
		 */

		/* Add */
		// OkHttpClient client = apiClient.getHttpClient();
		// Authenticator authenticator = new Authenticator();
		/*
		 * apiClient.getHttpClient().setAuthenticator(new Authenticator() {
		 * 
		 * @Override public Request authenticate(Proxy proxy, Response response) throws
		 * IOException { String credential = Credentials.basic( subKey,
		 * "https://centralindia.api.cognitive.microsoft.com/sts/v1.0/issueToken");
		 * return response.request().newBuilder().header("Authorization",
		 * credential).build(); }
		 * 
		 * @Override public Request authenticateProxy(Proxy proxy, Response response)
		 * throws IOException { return null; } });
		 */
		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getSupportedVoicesForVoiceSynthesisValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getSupportedVoicesForVoiceSynthesisCall(progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Gets a list of supported voices for offline synthesis.
	 * 
	 * @return List&lt;Voice&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<Voice> getSupportedVoicesForVoiceSynthesis() throws ApiException {
		ApiResponse<List<Voice>> resp = getSupportedVoicesForVoiceSynthesisWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Gets a list of supported voices for offline synthesis.
	 * 
	 * @return ApiResponse&lt;List&lt;Voice&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<Voice>> getSupportedVoicesForVoiceSynthesisWithHttpInfo() throws ApiException {
		/* Add */
		com.squareup.okhttp.Call call = getSupportedVoicesForVoiceSynthesisValidateBeforeCall(null, null);
		// com.squareup.okhttp.Call call =
		// getSupportedVoicesForVoiceSynthesisValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<List<Voice>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	// public Response<List<Voice>>
	// NewGetSupportedVoicesForVoiceSynthesisWithHttpInfo() throws ApiException {
	/* Add */
	// com.squareup.okhttp.Call call =
	// getSupportedVoicesForVoiceSynthesisValidateBeforeCall(null, null);
	// com.squareup.okhttp.Call call =
	// getSupportedVoicesForVoiceSynthesisValidateBeforeCall(null, null);
	// Type localVarReturnType = new TypeToken<List<Voice>>(){}.getType();
	// return apiClient.NewExecute(call, localVarReturnType);
	// }

	/* Get token from subKey */
	public ApiResponse<String> geIssuedToken() throws ApiException {
		/* Add */
		com.squareup.okhttp.Call call = getIssuedTokenCall(null, null);
		// com.squareup.okhttp.Call call =
		// getSupportedVoicesForVoiceSynthesisValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<String>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Gets a list of supported voices for offline synthesis. (asynchronously)
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call getSupportedVoicesForVoiceSynthesisAsync(final ApiCallback<List<Voice>> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getSupportedVoicesForVoiceSynthesisValidateBeforeCall(progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<Voice>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for getVoiceSyntheses
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getVoiceSynthesesCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/texttospeech/v3.0-beta1/voicesynthesis";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),
							progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getVoiceSynthesesValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getVoiceSynthesesCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Gets a list of voice synthesis under the selected subscription.
	 * 
	 * @return List&lt;VoiceSynthesis&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public List<VoiceSynthesis> getVoiceSyntheses() throws ApiException {
		ApiResponse<List<VoiceSynthesis>> resp = getVoiceSynthesesWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Gets a list of voice synthesis under the selected subscription.
	 * 
	 * @return ApiResponse&lt;List&lt;VoiceSynthesis&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<List<VoiceSynthesis>> getVoiceSynthesesWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = getVoiceSynthesesValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<List<VoiceSynthesis>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Gets a list of voice synthesis under the selected subscription.
	 * (asynchronously)
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call getVoiceSynthesesAsync(final ApiCallback<List<VoiceSynthesis>> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getVoiceSynthesesValidateBeforeCall(progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<List<VoiceSynthesis>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for getVoiceSynthesis
	 * 
	 * @param id                      The identifier of the synthesis. (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getVoiceSynthesisCall(UUID id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/texttospeech/v3.0-beta1/voicesynthesis/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);
		/* Add header */
		localVarHeaderParams.put("Ocp-Apim-Subscription-Key", subKey);
		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),
							progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getVoiceSynthesisValidateBeforeCall(UUID id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling getVoiceSynthesis(Async)");
		}

		com.squareup.okhttp.Call call = getVoiceSynthesisCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Gets the voice synthesis identified by the given ID.
	 * 
	 * @param id The identifier of the synthesis. (required)
	 * @return VoiceSynthesis
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public VoiceSynthesis getVoiceSynthesis(UUID id) throws ApiException {
		ApiResponse<VoiceSynthesis> resp = getVoiceSynthesisWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * Gets the voice synthesis identified by the given ID.
	 * 
	 * @param id The identifier of the synthesis. (required)
	 * @return ApiResponse&lt;VoiceSynthesis&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<VoiceSynthesis> getVoiceSynthesisWithHttpInfo(UUID id) throws ApiException {
		com.squareup.okhttp.Call call = getVoiceSynthesisValidateBeforeCall(id, null, null);
		Type localVarReturnType = new TypeToken<VoiceSynthesis>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Gets the voice synthesis identified by the given ID. (asynchronously)
	 * 
	 * @param id       The identifier of the synthesis. (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call getVoiceSynthesisAsync(UUID id, final ApiCallback<VoiceSynthesis> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getVoiceSynthesisValidateBeforeCall(id, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<VoiceSynthesis>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for updateVoiceSynthesis
	 * 
	 * @param id                      The identifier of the voice synthesis.
	 *                                (required)
	 * @param voiceSynthesisUpdate    The updated values for the voice synthesis.
	 *                                (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call updateVoiceSynthesisCall(UUID id, VoiceSynthesisUpdate voiceSynthesisUpdate,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = voiceSynthesisUpdate;

		// create path and map variables
		String localVarPath = "/api/texttospeech/v3.0-beta1/voicesynthesis/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),
							progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "subscription_key", "token" };
		return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call updateVoiceSynthesisValidateBeforeCall(UUID id,
			VoiceSynthesisUpdate voiceSynthesisUpdate, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling updateVoiceSynthesis(Async)");
		}

		// verify the required parameter 'voiceSynthesisUpdate' is set
		if (voiceSynthesisUpdate == null) {
			throw new ApiException(
					"Missing the required parameter 'voiceSynthesisUpdate' when calling updateVoiceSynthesis(Async)");
		}

		com.squareup.okhttp.Call call = updateVoiceSynthesisCall(id, voiceSynthesisUpdate, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Updates the mutable details of the voice synthesis identified by its ID.
	 * 
	 * @param id                   The identifier of the voice synthesis. (required)
	 * @param voiceSynthesisUpdate The updated values for the voice synthesis.
	 *                             (required)
	 * @return VoiceSynthesis
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public VoiceSynthesis updateVoiceSynthesis(UUID id, VoiceSynthesisUpdate voiceSynthesisUpdate) throws ApiException {
		ApiResponse<VoiceSynthesis> resp = updateVoiceSynthesisWithHttpInfo(id, voiceSynthesisUpdate);
		return resp.getData();
	}

	/**
	 * Updates the mutable details of the voice synthesis identified by its ID.
	 * 
	 * @param id                   The identifier of the voice synthesis. (required)
	 * @param voiceSynthesisUpdate The updated values for the voice synthesis.
	 *                             (required)
	 * @return ApiResponse&lt;VoiceSynthesis&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<VoiceSynthesis> updateVoiceSynthesisWithHttpInfo(UUID id,
			VoiceSynthesisUpdate voiceSynthesisUpdate) throws ApiException {
		com.squareup.okhttp.Call call = updateVoiceSynthesisValidateBeforeCall(id, voiceSynthesisUpdate, null, null);
		Type localVarReturnType = new TypeToken<VoiceSynthesis>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Updates the mutable details of the voice synthesis identified by its ID.
	 * (asynchronously)
	 * 
	 * @param id                   The identifier of the voice synthesis. (required)
	 * @param voiceSynthesisUpdate The updated values for the voice synthesis.
	 *                             (required)
	 * @param callback             The callback to be executed when the API call
	 *                             finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call updateVoiceSynthesisAsync(UUID id, VoiceSynthesisUpdate voiceSynthesisUpdate,
			final ApiCallback<VoiceSynthesis> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = updateVoiceSynthesisValidateBeforeCall(id, voiceSynthesisUpdate,
				progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<VoiceSynthesis>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
