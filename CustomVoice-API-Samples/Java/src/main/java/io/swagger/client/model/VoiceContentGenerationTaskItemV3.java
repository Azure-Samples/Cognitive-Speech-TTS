/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * VoiceContentGenerationTaskItemV3
 */
public class VoiceContentGenerationTaskItemV3 {
  @SerializedName("taskId")
  private UUID taskId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("contentPlainText")
  private String contentPlainText = null;

  /**
   * The task type: ssml or plain text
   */
  @JsonAdapter(TaskTypeEnum.Adapter.class)
  public enum TaskTypeEnum {
    NONE("None"),
    
    FOLDER("Folder"),
    
    FILE("File");

    private String value;

    TaskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaskTypeEnum fromValue(String text) {
      for (TaskTypeEnum b : TaskTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TaskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TaskTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("taskType")
  private TaskTypeEnum taskType = null;

  /**
   * The voice type for file only
   */
  @JsonAdapter(VoiceTypeEnum.Adapter.class)
  public enum VoiceTypeEnum {
    NONE("None"),
    
    STANDARDVOICE("StandardVoice"),
    
    NEURALVOICE("NeuralVoice"),
    
    OWNTYPICALCUSTOMVOICE("OwnTypicalCustomVoice"),
    
    SPECIALCUSTOMVOICE("SpecialCustomVoice"),
    
    OTHERTYPICALCUSTOMVOICE("OtherTypicalCustomVoice");

    private String value;

    VoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceTypeEnum fromValue(String text) {
      for (VoiceTypeEnum b : VoiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VoiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("voiceType")
  private VoiceTypeEnum voiceType = null;

  @SerializedName("lastUpdateTime")
  private OffsetDateTime lastUpdateTime = null;

  @SerializedName("subFilesCount")
  private Integer subFilesCount = null;

  @SerializedName("completedFilesCount")
  private Integer completedFilesCount = null;

  @SerializedName("containsEditing")
  private Boolean containsEditing = null;

  @SerializedName("containsRedo")
  private Boolean containsRedo = null;

  /**
   * The task status only for file
   */
  @JsonAdapter(TaskStatusEnum.Adapter.class)
  public enum TaskStatusEnum {
    NONE("None"),
    
    NEW("New"),
    
    EDITING("Editing"),
    
    COMPLETED("Completed"),
    
    REDO("Redo"),
    
    APPROVED("Approved");

    private String value;

    TaskStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaskStatusEnum fromValue(String text) {
      for (TaskStatusEnum b : TaskStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TaskStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaskStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TaskStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("taskStatus")
  private TaskStatusEnum taskStatus = null;

  public VoiceContentGenerationTaskItemV3 taskId(UUID taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * The task id
   * @return taskId
  **/
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", required = true, value = "The task id")
  public UUID getTaskId() {
    return taskId;
  }

  public void setTaskId(UUID taskId) {
    this.taskId = taskId;
  }

  public VoiceContentGenerationTaskItemV3 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The task name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The task name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VoiceContentGenerationTaskItemV3 contentPlainText(String contentPlainText) {
    this.contentPlainText = contentPlainText;
    return this;
  }

   /**
   * The head content of the plain text for file only
   * @return contentPlainText
  **/
  @ApiModelProperty(value = "The head content of the plain text for file only")
  public String getContentPlainText() {
    return contentPlainText;
  }

  public void setContentPlainText(String contentPlainText) {
    this.contentPlainText = contentPlainText;
  }

  public VoiceContentGenerationTaskItemV3 taskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * The task type: ssml or plain text
   * @return taskType
  **/
  @ApiModelProperty(required = true, value = "The task type: ssml or plain text")
  public TaskTypeEnum getTaskType() {
    return taskType;
  }

  public void setTaskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
  }

  public VoiceContentGenerationTaskItemV3 voiceType(VoiceTypeEnum voiceType) {
    this.voiceType = voiceType;
    return this;
  }

   /**
   * The voice type for file only
   * @return voiceType
  **/
  @ApiModelProperty(required = true, value = "The voice type for file only")
  public VoiceTypeEnum getVoiceType() {
    return voiceType;
  }

  public void setVoiceType(VoiceTypeEnum voiceType) {
    this.voiceType = voiceType;
  }

  public VoiceContentGenerationTaskItemV3 lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * The last update time: UTC time
   * @return lastUpdateTime
  **/
  @ApiModelProperty(required = true, value = "The last update time: UTC time")
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }

  public VoiceContentGenerationTaskItemV3 subFilesCount(Integer subFilesCount) {
    this.subFilesCount = subFilesCount;
    return this;
  }

   /**
   * The sub files count recursively for folder only
   * @return subFilesCount
  **/
  @ApiModelProperty(required = true, value = "The sub files count recursively for folder only")
  public Integer getSubFilesCount() {
    return subFilesCount;
  }

  public void setSubFilesCount(Integer subFilesCount) {
    this.subFilesCount = subFilesCount;
  }

  public VoiceContentGenerationTaskItemV3 completedFilesCount(Integer completedFilesCount) {
    this.completedFilesCount = completedFilesCount;
    return this;
  }

   /**
   * The sub completed files count recursively for folder only
   * @return completedFilesCount
  **/
  @ApiModelProperty(required = true, value = "The sub completed files count recursively for folder only")
  public Integer getCompletedFilesCount() {
    return completedFilesCount;
  }

  public void setCompletedFilesCount(Integer completedFilesCount) {
    this.completedFilesCount = completedFilesCount;
  }

  public VoiceContentGenerationTaskItemV3 containsEditing(Boolean containsEditing) {
    this.containsEditing = containsEditing;
    return this;
  }

   /**
   * A value indicating whether the folder contains any files that are with Editing status
   * @return containsEditing
  **/
  @ApiModelProperty(required = true, value = "A value indicating whether the folder contains any files that are with Editing status")
  public Boolean isContainsEditing() {
    return containsEditing;
  }

  public void setContainsEditing(Boolean containsEditing) {
    this.containsEditing = containsEditing;
  }

  public VoiceContentGenerationTaskItemV3 containsRedo(Boolean containsRedo) {
    this.containsRedo = containsRedo;
    return this;
  }

   /**
   * A value indicating whether the folder contains any files that are with Redo status
   * @return containsRedo
  **/
  @ApiModelProperty(required = true, value = "A value indicating whether the folder contains any files that are with Redo status")
  public Boolean isContainsRedo() {
    return containsRedo;
  }

  public void setContainsRedo(Boolean containsRedo) {
    this.containsRedo = containsRedo;
  }

  public VoiceContentGenerationTaskItemV3 taskStatus(TaskStatusEnum taskStatus) {
    this.taskStatus = taskStatus;
    return this;
  }

   /**
   * The task status only for file
   * @return taskStatus
  **/
  @ApiModelProperty(required = true, value = "The task status only for file")
  public TaskStatusEnum getTaskStatus() {
    return taskStatus;
  }

  public void setTaskStatus(TaskStatusEnum taskStatus) {
    this.taskStatus = taskStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VoiceContentGenerationTaskItemV3 voiceContentGenerationTaskItemV3 = (VoiceContentGenerationTaskItemV3) o;
    return Objects.equals(this.taskId, voiceContentGenerationTaskItemV3.taskId) &&
        Objects.equals(this.name, voiceContentGenerationTaskItemV3.name) &&
        Objects.equals(this.contentPlainText, voiceContentGenerationTaskItemV3.contentPlainText) &&
        Objects.equals(this.taskType, voiceContentGenerationTaskItemV3.taskType) &&
        Objects.equals(this.voiceType, voiceContentGenerationTaskItemV3.voiceType) &&
        Objects.equals(this.lastUpdateTime, voiceContentGenerationTaskItemV3.lastUpdateTime) &&
        Objects.equals(this.subFilesCount, voiceContentGenerationTaskItemV3.subFilesCount) &&
        Objects.equals(this.completedFilesCount, voiceContentGenerationTaskItemV3.completedFilesCount) &&
        Objects.equals(this.containsEditing, voiceContentGenerationTaskItemV3.containsEditing) &&
        Objects.equals(this.containsRedo, voiceContentGenerationTaskItemV3.containsRedo) &&
        Objects.equals(this.taskStatus, voiceContentGenerationTaskItemV3.taskStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskId, name, contentPlainText, taskType, voiceType, lastUpdateTime, subFilesCount, completedFilesCount, containsEditing, containsRedo, taskStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VoiceContentGenerationTaskItemV3 {\n");
    
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contentPlainText: ").append(toIndentedString(contentPlainText)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    voiceType: ").append(toIndentedString(voiceType)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    subFilesCount: ").append(toIndentedString(subFilesCount)).append("\n");
    sb.append("    completedFilesCount: ").append(toIndentedString(completedFilesCount)).append("\n");
    sb.append("    containsEditing: ").append(toIndentedString(containsEditing)).append("\n");
    sb.append("    containsRedo: ").append(toIndentedString(containsRedo)).append("\n");
    sb.append("    taskStatus: ").append(toIndentedString(taskStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

