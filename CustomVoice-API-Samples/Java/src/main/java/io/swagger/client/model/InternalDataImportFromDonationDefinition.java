/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DataCollectionDonationIdentity;
import io.swagger.client.model.UtteranceDefinition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InternalDataImportFromDonationDefinition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-02T13:09:27.002+08:00")
public class InternalDataImportFromDonationDefinition {
  @SerializedName("dataDonationId")
  private DataCollectionDonationIdentity dataDonationId = null;

  /**
   * The kind of the data donation (e.g. DataCollection)
   */
  @JsonAdapter(DataDonationKindEnum.Adapter.class)
  public enum DataDonationKindEnum {
    DATACOLLECTION("DataCollection");

    private String value;

    DataDonationKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataDonationKindEnum fromValue(String text) {
      for (DataDonationKindEnum b : DataDonationKindEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DataDonationKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataDonationKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataDonationKindEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DataDonationKindEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dataDonationKind")
  private DataDonationKindEnum dataDonationKind = null;

  @SerializedName("transcriptions")
  private List<UtteranceDefinition> transcriptions = new ArrayList<UtteranceDefinition>();

  @SerializedName("locale")
  private String locale = null;

  public InternalDataImportFromDonationDefinition dataDonationId(DataCollectionDonationIdentity dataDonationId) {
    this.dataDonationId = dataDonationId;
    return this;
  }

   /**
   * The id of the data donation
   * @return dataDonationId
  **/
  @ApiModelProperty(required = true, value = "The id of the data donation")
  public DataCollectionDonationIdentity getDataDonationId() {
    return dataDonationId;
  }

  public void setDataDonationId(DataCollectionDonationIdentity dataDonationId) {
    this.dataDonationId = dataDonationId;
  }

  public InternalDataImportFromDonationDefinition dataDonationKind(DataDonationKindEnum dataDonationKind) {
    this.dataDonationKind = dataDonationKind;
    return this;
  }

   /**
   * The kind of the data donation (e.g. DataCollection)
   * @return dataDonationKind
  **/
  @ApiModelProperty(required = true, value = "The kind of the data donation (e.g. DataCollection)")
  public DataDonationKindEnum getDataDonationKind() {
    return dataDonationKind;
  }

  public void setDataDonationKind(DataDonationKindEnum dataDonationKind) {
    this.dataDonationKind = dataDonationKind;
  }

  public InternalDataImportFromDonationDefinition transcriptions(List<UtteranceDefinition> transcriptions) {
    this.transcriptions = transcriptions;
    return this;
  }

  public InternalDataImportFromDonationDefinition addTranscriptionsItem(UtteranceDefinition transcriptionsItem) {
    this.transcriptions.add(transcriptionsItem);
    return this;
  }

   /**
   * The list of utterances
   * @return transcriptions
  **/
  @ApiModelProperty(required = true, value = "The list of utterances")
  public List<UtteranceDefinition> getTranscriptions() {
    return transcriptions;
  }

  public void setTranscriptions(List<UtteranceDefinition> transcriptions) {
    this.transcriptions = transcriptions;
  }

  public InternalDataImportFromDonationDefinition locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * The locale of the contained data
   * @return locale
  **/
  @ApiModelProperty(value = "The locale of the contained data")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalDataImportFromDonationDefinition internalDataImportFromDonationDefinition = (InternalDataImportFromDonationDefinition) o;
    return Objects.equals(this.dataDonationId, internalDataImportFromDonationDefinition.dataDonationId) &&
        Objects.equals(this.dataDonationKind, internalDataImportFromDonationDefinition.dataDonationKind) &&
        Objects.equals(this.transcriptions, internalDataImportFromDonationDefinition.transcriptions) &&
        Objects.equals(this.locale, internalDataImportFromDonationDefinition.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataDonationId, dataDonationKind, transcriptions, locale);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalDataImportFromDonationDefinition {\n");
    
    sb.append("    dataDonationId: ").append(toIndentedString(dataDonationId)).append("\n");
    sb.append("    dataDonationKind: ").append(toIndentedString(dataDonationKind)).append("\n");
    sb.append("    transcriptions: ").append(toIndentedString(transcriptions)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

