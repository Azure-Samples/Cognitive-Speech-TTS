/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * IFile
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-02T13:09:27.002+08:00")
public class IFile {
  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets kind
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    DATAIMPORTREPORT("DataImportReport"),
    
    AUDIOFILE("AudioFile"),
    
    LANGUAGEDATAUSERINPUT("LanguageDataUserInput"),
    
    LANGUAGEDATAIMPORTRESULT("LanguageDataImportResult"),
    
    PRONUNCIATIONDATAUSERINPUT("PronunciationDataUserInput"),
    
    PRONUNCIATIONDATAIMPORTRESULT("PronunciationDataImportResult"),
    
    ACOUSTICDATAUSERINPUTAUDIOFILES("AcousticDataUserInputAudioFiles"),
    
    ACOUSTICDATAUSERINPUTINDEXFILE("AcousticDataUserInputIndexFile"),
    
    ACOUSTICDATAIMPORTREPORT("AcousticDataImportReport"),
    
    ACOUSTICDATANORMALIZEDAUDIOFILES("AcousticDataNormalizedAudioFiles"),
    
    ACOUSTICDATANORMALIZEDINDEXFILE("AcousticDataNormalizedIndexFile"),
    
    ACOUSTICDATANORMALIZEDTRANSCRIPTION("AcousticDataNormalizedTranscription"),
    
    CUSTOMVOICEPLAINTEXTSCRIPTFILE("CustomVoicePlainTextScriptFile"),
    
    CUSTOMVOICEWAVEZIPFILE("CustomVoiceWaveZipFile"),
    
    NORMALIZEDVOICEPLAINTEXTSCRIPTFILE("NormalizedVoicePlainTextScriptFile"),
    
    NORMALIZEDVOICEWAVEZIPFILE("NormalizedVoiceWaveZipFile"),
    
    VOICEDATAIMPORTWAVEDETAILSFILE("VoiceDataImportWaveDetailsFile"),
    
    VOICELONGAUDIODATARAWAUDIOZIPFILE("VoiceLongAudioDataRawAudioZipFile"),
    
    VOICELONGAUDIODATARAWSCRIPTZIPFILE("VoiceLongAudioDataRawScriptZipFile"),
    
    TRANSCRIPTIONRESULT("TranscriptionResult"),
    
    TRANSCRIPTIONV21RESULT("TranscriptionV21Result"),
    
    TRANSCRIPTIONV21NORMALIZEDDISPLAYRESULT("TranscriptionV21NormalizedDisplayResult"),
    
    TRANSCRIPTIONOUTPUTFILE("TranscriptionOutputFile"),
    
    INTERNALNAMEMAPPING("InternalNameMapping"),
    
    ACCURACYTESTREFERENCEFILE("AccuracyTestReferenceFile"),
    
    ACCURACYTESTRESULT("AccuracyTestResult"),
    
    SCORINGSUMMARYFILE("ScoringSummaryFile"),
    
    SCORINGDETAILSFILE("ScoringDetailsFile"),
    
    DEPLOYMENTDATAEXPORTRESULT("DeploymentDataExportResult"),
    
    VOICETESTRESULT("VoiceTestResult"),
    
    VOICETESTTEXT("VoiceTestText"),
    
    LANGUAGEGENERATIONMARKDOWNFILE("LanguageGenerationMarkdownFile"),
    
    VOICESYNTHESISRESULT("VoiceSynthesisResult"),
    
    VOICESYNTHESISINPUT("VoiceSynthesisInput"),
    
    BATCHRESULTSLIST("BatchResultsList");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String text) {
      for (KindEnum b : KindEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return KindEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("kind")
  private KindEnum kind = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("id")
  private UUID id = null;

  public IFile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IFile kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @ApiModelProperty(required = true, value = "")
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }

  public IFile url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(required = true, value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public IFile size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @ApiModelProperty(required = true, value = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public IFile properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public IFile putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The custom properties of this entity
   * @return properties
  **/
  @ApiModelProperty(value = "The custom properties of this entity")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public IFile id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier of this entity
   * @return id
  **/
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", required = true, value = "The identifier of this entity")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IFile ifile = (IFile) o;
    return Objects.equals(this.name, ifile.name) &&
        Objects.equals(this.kind, ifile.kind) &&
        Objects.equals(this.url, ifile.url) &&
        Objects.equals(this.size, ifile.size) &&
        Objects.equals(this.properties, ifile.properties) &&
        Objects.equals(this.id, ifile.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, kind, url, size, properties, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IFile {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

