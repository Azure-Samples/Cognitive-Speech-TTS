/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Dataset;
import io.swagger.client.model.DatasetIdentity;
import io.swagger.client.model.DatasetUpdate;
import io.swagger.client.model.ErrorContent;
import java.io.File;
import io.swagger.client.model.IFile;
import io.swagger.client.model.Project;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoiceDatasetsApi {
    private ApiClient apiClient;

    public VoiceDatasetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoiceDatasetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addVoiceDatasetsToProject
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be added to the project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVoiceDatasetsToProjectCall(UUID id, List<DatasetIdentity> datasets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = datasets;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/project/{id}/add"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVoiceDatasetsToProjectValidateBeforeCall(UUID id, List<DatasetIdentity> datasets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addVoiceDatasetsToProject(Async)");
        }
        
        // verify the required parameter 'datasets' is set
        if (datasets == null) {
            throw new ApiException("Missing the required parameter 'datasets' when calling addVoiceDatasetsToProject(Async)");
        }
        

        com.squareup.okhttp.Call call = addVoiceDatasetsToProjectCall(id, datasets, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds the list of datasets to the specified project.
     * 
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be added to the project. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project addVoiceDatasetsToProject(UUID id, List<DatasetIdentity> datasets) throws ApiException {
        ApiResponse<Project> resp = addVoiceDatasetsToProjectWithHttpInfo(id, datasets);
        return resp.getData();
    }

    /**
     * Adds the list of datasets to the specified project.
     * 
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be added to the project. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> addVoiceDatasetsToProjectWithHttpInfo(UUID id, List<DatasetIdentity> datasets) throws ApiException {
        com.squareup.okhttp.Call call = addVoiceDatasetsToProjectValidateBeforeCall(id, datasets, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds the list of datasets to the specified project. (asynchronously)
     * 
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be added to the project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVoiceDatasetsToProjectAsync(UUID id, List<DatasetIdentity> datasets, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVoiceDatasetsToProjectValidateBeforeCall(id, datasets, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteVoiceDataset
     * @param id The identifier of the voice dataset (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVoiceDatasetCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVoiceDatasetValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVoiceDataset(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVoiceDatasetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the voice dataset with the given id.
     * 
     * @param id The identifier of the voice dataset (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVoiceDataset(UUID id) throws ApiException {
        deleteVoiceDatasetWithHttpInfo(id);
    }

    /**
     * Deletes the voice dataset with the given id.
     * 
     * @param id The identifier of the voice dataset (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVoiceDatasetWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = deleteVoiceDatasetValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes the voice dataset with the given id. (asynchronously)
     * 
     * @param id The identifier of the voice dataset (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVoiceDatasetAsync(UUID id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVoiceDatasetValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getSupportedLocalesForVoiceDatasets
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSupportedLocalesForVoiceDatasetsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/locales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportedLocalesForVoiceDatasetsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSupportedLocalesForVoiceDatasetsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of supported locales for custom voice data imports.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getSupportedLocalesForVoiceDatasets() throws ApiException {
        ApiResponse<List<String>> resp = getSupportedLocalesForVoiceDatasetsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of supported locales for custom voice data imports.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getSupportedLocalesForVoiceDatasetsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSupportedLocalesForVoiceDatasetsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of supported locales for custom voice data imports. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSupportedLocalesForVoiceDatasetsAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportedLocalesForVoiceDatasetsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupportedLocalesForVoiceLongAudioDatasets
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSupportedLocalesForVoiceLongAudioDatasetsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/longaudiolocales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportedLocalesForVoiceLongAudioDatasetsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSupportedLocalesForVoiceLongAudioDatasetsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get long audio data / audio only data import supported locales.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getSupportedLocalesForVoiceLongAudioDatasets() throws ApiException {
        ApiResponse<List<String>> resp = getSupportedLocalesForVoiceLongAudioDatasetsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get long audio data / audio only data import supported locales.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getSupportedLocalesForVoiceLongAudioDatasetsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSupportedLocalesForVoiceLongAudioDatasetsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get long audio data / audio only data import supported locales. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSupportedLocalesForVoiceLongAudioDatasetsAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportedLocalesForVoiceLongAudioDatasetsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVoiceDatasetFiles
     * @param id The identifier of the dataset. (required)
     * @param sasValidity The length of time in seconds that an SAS url should be valid. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVoiceDatasetFilesCall(UUID id, Integer sasValidity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/{id}/files"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sasValidity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sasValidity", sasValidity));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVoiceDatasetFilesValidateBeforeCall(UUID id, Integer sasValidity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVoiceDatasetFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getVoiceDatasetFilesCall(id, sasValidity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the files of the dataset identified by the given ID.
     * 
     * @param id The identifier of the dataset. (required)
     * @param sasValidity The length of time in seconds that an SAS url should be valid. (optional)
     * @return List&lt;IFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IFile> getVoiceDatasetFiles(UUID id, Integer sasValidity) throws ApiException {
        ApiResponse<List<IFile>> resp = getVoiceDatasetFilesWithHttpInfo(id, sasValidity);
        return resp.getData();
    }

    /**
     * Gets the files of the dataset identified by the given ID.
     * 
     * @param id The identifier of the dataset. (required)
     * @param sasValidity The length of time in seconds that an SAS url should be valid. (optional)
     * @return ApiResponse&lt;List&lt;IFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IFile>> getVoiceDatasetFilesWithHttpInfo(UUID id, Integer sasValidity) throws ApiException {
        com.squareup.okhttp.Call call = getVoiceDatasetFilesValidateBeforeCall(id, sasValidity, null, null);
        Type localVarReturnType = new TypeToken<List<IFile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the files of the dataset identified by the given ID. (asynchronously)
     * 
     * @param id The identifier of the dataset. (required)
     * @param sasValidity The length of time in seconds that an SAS url should be valid. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVoiceDatasetFilesAsync(UUID id, Integer sasValidity, final ApiCallback<List<IFile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVoiceDatasetFilesValidateBeforeCall(id, sasValidity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IFile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVoiceDatasets
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVoiceDatasetsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVoiceDatasetsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getVoiceDatasetsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all voice datasets.
     * 
     * @return List&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Dataset> getVoiceDatasets() throws ApiException {
        ApiResponse<List<Dataset>> resp = getVoiceDatasetsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all voice datasets.
     * 
     * @return ApiResponse&lt;List&lt;Dataset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Dataset>> getVoiceDatasetsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVoiceDatasetsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all voice datasets. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVoiceDatasetsAsync(final ApiCallback<List<Dataset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVoiceDatasetsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVoiceDatasetsForProject
     * @param id The identifier of the project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVoiceDatasetsForProjectCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/project/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVoiceDatasetsForProjectValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVoiceDatasetsForProject(Async)");
        }
        

        com.squareup.okhttp.Call call = getVoiceDatasetsForProjectCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the list of datasets for specified project
     * 
     * @param id The identifier of the project. (required)
     * @return List&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Dataset> getVoiceDatasetsForProject(UUID id) throws ApiException {
        ApiResponse<List<Dataset>> resp = getVoiceDatasetsForProjectWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the list of datasets for specified project
     * 
     * @param id The identifier of the project. (required)
     * @return ApiResponse&lt;List&lt;Dataset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Dataset>> getVoiceDatasetsForProjectWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getVoiceDatasetsForProjectValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of datasets for specified project (asynchronously)
     * 
     * @param id The identifier of the project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVoiceDatasetsForProjectAsync(UUID id, final ApiCallback<List<Dataset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVoiceDatasetsForProjectValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeVoiceDatasetsFromProject
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be removed from the project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeVoiceDatasetsFromProjectCall(UUID id, List<DatasetIdentity> datasets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = datasets;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/project/{id}/remove"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeVoiceDatasetsFromProjectValidateBeforeCall(UUID id, List<DatasetIdentity> datasets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeVoiceDatasetsFromProject(Async)");
        }
        
        // verify the required parameter 'datasets' is set
        if (datasets == null) {
            throw new ApiException("Missing the required parameter 'datasets' when calling removeVoiceDatasetsFromProject(Async)");
        }
        

        com.squareup.okhttp.Call call = removeVoiceDatasetsFromProjectCall(id, datasets, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes the list of datasets from the specified project.
     * 
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be removed from the project. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project removeVoiceDatasetsFromProject(UUID id, List<DatasetIdentity> datasets) throws ApiException {
        ApiResponse<Project> resp = removeVoiceDatasetsFromProjectWithHttpInfo(id, datasets);
        return resp.getData();
    }

    /**
     * Removes the list of datasets from the specified project.
     * 
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be removed from the project. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> removeVoiceDatasetsFromProjectWithHttpInfo(UUID id, List<DatasetIdentity> datasets) throws ApiException {
        com.squareup.okhttp.Call call = removeVoiceDatasetsFromProjectValidateBeforeCall(id, datasets, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes the list of datasets from the specified project. (asynchronously)
     * 
     * @param id The identifier of the project. (required)
     * @param datasets The list of datasets that are going to be removed from the project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeVoiceDatasetsFromProjectAsync(UUID id, List<DatasetIdentity> datasets, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeVoiceDatasetsFromProjectValidateBeforeCall(id, datasets, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVoiceDataset
     * @param id The identifier of the voice dataset. (required)
     * @param datasetUpdate The updated values for the voice dataset. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVoiceDatasetCall(UUID id, DatasetUpdate datasetUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = datasetUpdate;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVoiceDatasetValidateBeforeCall(UUID id, DatasetUpdate datasetUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateVoiceDataset(Async)");
        }
        
        // verify the required parameter 'datasetUpdate' is set
        if (datasetUpdate == null) {
            throw new ApiException("Missing the required parameter 'datasetUpdate' when calling updateVoiceDataset(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVoiceDatasetCall(id, datasetUpdate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the mutable details of the voice dataset identified by its ID.
     * 
     * @param id The identifier of the voice dataset. (required)
     * @param datasetUpdate The updated values for the voice dataset. (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dataset updateVoiceDataset(UUID id, DatasetUpdate datasetUpdate) throws ApiException {
        ApiResponse<Dataset> resp = updateVoiceDatasetWithHttpInfo(id, datasetUpdate);
        return resp.getData();
    }

    /**
     * Updates the mutable details of the voice dataset identified by its ID.
     * 
     * @param id The identifier of the voice dataset. (required)
     * @param datasetUpdate The updated values for the voice dataset. (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dataset> updateVoiceDatasetWithHttpInfo(UUID id, DatasetUpdate datasetUpdate) throws ApiException {
        com.squareup.okhttp.Call call = updateVoiceDatasetValidateBeforeCall(id, datasetUpdate, null, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the mutable details of the voice dataset identified by its ID. (asynchronously)
     * 
     * @param id The identifier of the voice dataset. (required)
     * @param datasetUpdate The updated values for the voice dataset. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVoiceDatasetAsync(UUID id, DatasetUpdate datasetUpdate, final ApiCallback<Dataset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVoiceDatasetValidateBeforeCall(id, datasetUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadVoiceAudioOnlyDataset
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of audio files (.wav or .mp3) without transcript. A transcription for each spoken utterance will be automatically generated. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadVoiceAudioOnlyDatasetCall(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/audioonly";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (projectId != null)
        localVarFormParams.put("projectId", projectId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (description != null)
        localVarFormParams.put("description", description);
        if (locale != null)
        localVarFormParams.put("locale", locale);
        if (dataImportKind != null)
        localVarFormParams.put("dataImportKind", dataImportKind);
        if (properties != null)
        localVarFormParams.put("properties", properties);
        if (audiodata != null)
        localVarFormParams.put("audiodata", audiodata);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadVoiceAudioOnlyDatasetValidateBeforeCall(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = uploadVoiceAudioOnlyDatasetCall(projectId, name, description, locale, dataImportKind, properties, audiodata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload voice dataset only with audio.  This API is in currently in preview. It only accept subscription key authentication.  Access token authentication is not supported and will get a bad request error.
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of audio files (.wav or .mp3) without transcript. A transcription for each spoken utterance will be automatically generated. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadVoiceAudioOnlyDataset(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata) throws ApiException {
        uploadVoiceAudioOnlyDatasetWithHttpInfo(projectId, name, description, locale, dataImportKind, properties, audiodata);
    }

    /**
     * Upload voice dataset only with audio.  This API is in currently in preview. It only accept subscription key authentication.  Access token authentication is not supported and will get a bad request error.
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of audio files (.wav or .mp3) without transcript. A transcription for each spoken utterance will be automatically generated. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadVoiceAudioOnlyDatasetWithHttpInfo(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata) throws ApiException {
        com.squareup.okhttp.Call call = uploadVoiceAudioOnlyDatasetValidateBeforeCall(projectId, name, description, locale, dataImportKind, properties, audiodata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload voice dataset only with audio.  This API is in currently in preview. It only accept subscription key authentication.  Access token authentication is not supported and will get a bad request error. (asynchronously)
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of audio files (.wav or .mp3) without transcript. A transcription for each spoken utterance will be automatically generated. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadVoiceAudioOnlyDatasetAsync(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadVoiceAudioOnlyDatasetValidateBeforeCall(projectId, name, description, locale, dataImportKind, properties, audiodata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadVoiceDataset
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip file containing the audio data. (optional)
     * @param transcriptions The transcriptions text file of the audio data. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadVoiceDatasetCall(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (projectId != null)
        localVarFormParams.put("projectId", projectId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (description != null)
        localVarFormParams.put("description", description);
        if (locale != null)
        localVarFormParams.put("locale", locale);
        if (dataImportKind != null)
        localVarFormParams.put("dataImportKind", dataImportKind);
        if (properties != null)
        localVarFormParams.put("properties", properties);
        if (audiodata != null)
        localVarFormParams.put("audiodata", audiodata);
        if (transcriptions != null)
        localVarFormParams.put("transcriptions", transcriptions);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadVoiceDatasetValidateBeforeCall(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = uploadVoiceDatasetCall(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Uploads data and creates a new voice data object.
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip file containing the audio data. (optional)
     * @param transcriptions The transcriptions text file of the audio data. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadVoiceDataset(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions) throws ApiException {
        uploadVoiceDatasetWithHttpInfo(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions);
    }

    /**
     * Uploads data and creates a new voice data object.
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip file containing the audio data. (optional)
     * @param transcriptions The transcriptions text file of the audio data. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadVoiceDatasetWithHttpInfo(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions) throws ApiException {
        com.squareup.okhttp.Call call = uploadVoiceDatasetValidateBeforeCall(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, null, null);
        return apiClient.execute(call);
    }

    /**
     * Uploads data and creates a new voice data object. (asynchronously)
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip file containing the audio data. (optional)
     * @param transcriptions The transcriptions text file of the audio data. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadVoiceDatasetAsync(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadVoiceDatasetValidateBeforeCall(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadVoiceLongAudioDataset
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of long, unsegmented audio files. (.wav or .mp3) Audio file should have the same name with the paired transcript (optional)
     * @param transcriptions A zip of transcript text files. (.txt in UTF-8 encoding with a byte-order marker) Transcript file should have the same name with the paired audio file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadVoiceLongAudioDatasetCall(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/texttospeech/v3.0-beta1/datasets/longaudio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (projectId != null)
        localVarFormParams.put("projectId", projectId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (description != null)
        localVarFormParams.put("description", description);
        if (locale != null)
        localVarFormParams.put("locale", locale);
        if (dataImportKind != null)
        localVarFormParams.put("dataImportKind", dataImportKind);
        if (properties != null)
        localVarFormParams.put("properties", properties);
        if (audiodata != null)
        localVarFormParams.put("audiodata", audiodata);
        if (transcriptions != null)
        localVarFormParams.put("transcriptions", transcriptions);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "subscription_key", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadVoiceLongAudioDatasetValidateBeforeCall(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = uploadVoiceLongAudioDatasetCall(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload voice dataset with long audio and scripts.  This API is in currently in preview. It only accept subscription key authentication.  Access token authentication is not supported and will get a bad request error.
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of long, unsegmented audio files. (.wav or .mp3) Audio file should have the same name with the paired transcript (optional)
     * @param transcriptions A zip of transcript text files. (.txt in UTF-8 encoding with a byte-order marker) Transcript file should have the same name with the paired audio file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadVoiceLongAudioDataset(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions) throws ApiException {
        uploadVoiceLongAudioDatasetWithHttpInfo(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions);
    }

    /**
     * Upload voice dataset with long audio and scripts.  This API is in currently in preview. It only accept subscription key authentication.  Access token authentication is not supported and will get a bad request error.
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of long, unsegmented audio files. (.wav or .mp3) Audio file should have the same name with the paired transcript (optional)
     * @param transcriptions A zip of transcript text files. (.txt in UTF-8 encoding with a byte-order marker) Transcript file should have the same name with the paired audio file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadVoiceLongAudioDatasetWithHttpInfo(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions) throws ApiException {
        com.squareup.okhttp.Call call = uploadVoiceLongAudioDatasetValidateBeforeCall(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload voice dataset with long audio and scripts.  This API is in currently in preview. It only accept subscription key authentication.  Access token authentication is not supported and will get a bad request error. (asynchronously)
     * 
     * @param projectId The optional string representation of a project ID. If set, the dataset will be associated with that project. (optional)
     * @param name The name of this data import (always add this string for any import). (optional)
     * @param description Optional description of this data import. (optional)
     * @param locale The locale of this data import (always add this string for any import). (optional)
     * @param dataImportKind The kind of the data import (always add this string for any import). (optional)
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings) (optional)
     * @param audiodata A zip of long, unsegmented audio files. (.wav or .mp3) Audio file should have the same name with the paired transcript (optional)
     * @param transcriptions A zip of transcript text files. (.txt in UTF-8 encoding with a byte-order marker) Transcript file should have the same name with the paired audio file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadVoiceLongAudioDatasetAsync(String projectId, String name, String description, String locale, String dataImportKind, String properties, File audiodata, File transcriptions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadVoiceLongAudioDatasetValidateBeforeCall(projectId, name, description, locale, dataImportKind, properties, audiodata, transcriptions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
