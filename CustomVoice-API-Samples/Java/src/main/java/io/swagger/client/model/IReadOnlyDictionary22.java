/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * IReadOnlyDictionary22
 */
public class IReadOnlyDictionary22 {
  @SerializedName("None")
  private List<String> none = null;

  @SerializedName("SpeechToText")
  private List<String> speechToText = null;

  @SerializedName("TextToSpeech")
  private List<String> textToSpeech = null;

  public IReadOnlyDictionary22 none(List<String> none) {
    this.none = none;
    return this;
  }

  public IReadOnlyDictionary22 addNoneItem(String noneItem) {
    if (this.none == null) {
      this.none = new ArrayList<String>();
    }
    this.none.add(noneItem);
    return this;
  }

   /**
   * Get none
   * @return none
  **/
  @ApiModelProperty(value = "")
  public List<String> getNone() {
    return none;
  }

  public void setNone(List<String> none) {
    this.none = none;
  }

  public IReadOnlyDictionary22 speechToText(List<String> speechToText) {
    this.speechToText = speechToText;
    return this;
  }

  public IReadOnlyDictionary22 addSpeechToTextItem(String speechToTextItem) {
    if (this.speechToText == null) {
      this.speechToText = new ArrayList<String>();
    }
    this.speechToText.add(speechToTextItem);
    return this;
  }

   /**
   * Get speechToText
   * @return speechToText
  **/
  @ApiModelProperty(value = "")
  public List<String> getSpeechToText() {
    return speechToText;
  }

  public void setSpeechToText(List<String> speechToText) {
    this.speechToText = speechToText;
  }

  public IReadOnlyDictionary22 textToSpeech(List<String> textToSpeech) {
    this.textToSpeech = textToSpeech;
    return this;
  }

  public IReadOnlyDictionary22 addTextToSpeechItem(String textToSpeechItem) {
    if (this.textToSpeech == null) {
      this.textToSpeech = new ArrayList<String>();
    }
    this.textToSpeech.add(textToSpeechItem);
    return this;
  }

   /**
   * Get textToSpeech
   * @return textToSpeech
  **/
  @ApiModelProperty(value = "")
  public List<String> getTextToSpeech() {
    return textToSpeech;
  }

  public void setTextToSpeech(List<String> textToSpeech) {
    this.textToSpeech = textToSpeech;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IReadOnlyDictionary22 ireadOnlyDictionary22 = (IReadOnlyDictionary22) o;
    return Objects.equals(this.none, ireadOnlyDictionary22.none) &&
        Objects.equals(this.speechToText, ireadOnlyDictionary22.speechToText) &&
        Objects.equals(this.textToSpeech, ireadOnlyDictionary22.textToSpeech);
  }

  @Override
  public int hashCode() {
    return Objects.hash(none, speechToText, textToSpeech);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IReadOnlyDictionary22 {\n");
    
    sb.append("    none: ").append(toIndentedString(none)).append("\n");
    sb.append("    speechToText: ").append(toIndentedString(speechToText)).append("\n");
    sb.append("    textToSpeech: ").append(toIndentedString(textToSpeech)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

