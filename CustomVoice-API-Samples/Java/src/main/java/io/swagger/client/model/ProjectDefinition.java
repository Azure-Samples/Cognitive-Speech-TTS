/*
 * Speech Services API v3.0-beta1
 * Speech Services API v3.0-beta1.
 *
 * OpenAPI spec version: v3.0-beta1
 * Contact: crservice@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ProjectDefinition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-02T13:09:27.002+08:00")
public class ProjectDefinition {
  /**
   * The kind of the project
   */
  @JsonAdapter(ProjectKindEnum.Adapter.class)
  public enum ProjectKindEnum {
    NONE("None"),
    
    SPEECHTOTEXT("SpeechToText"),
    
    TEXTTOSPEECH("TextToSpeech");

    private String value;

    ProjectKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectKindEnum fromValue(String text) {
      for (ProjectKindEnum b : ProjectKindEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProjectKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectKindEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProjectKindEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("projectKind")
  private ProjectKindEnum projectKind = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("locale")
  private String locale = null;

  public ProjectDefinition projectKind(ProjectKindEnum projectKind) {
    this.projectKind = projectKind;
    return this;
  }

   /**
   * The kind of the project
   * @return projectKind
  **/
  @ApiModelProperty(required = true, value = "The kind of the project")
  public ProjectKindEnum getProjectKind() {
    return projectKind;
  }

  public void setProjectKind(ProjectKindEnum projectKind) {
    this.projectKind = projectKind;
  }

  public ProjectDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the object
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the object")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProjectDefinition description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the object
   * @return description
  **/
  @ApiModelProperty(value = "The description of the object")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProjectDefinition properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ProjectDefinition putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The custom properties of this entity
   * @return properties
  **/
  @ApiModelProperty(value = "The custom properties of this entity")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public ProjectDefinition locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * The locale of the contained data
   * @return locale
  **/
  @ApiModelProperty(value = "The locale of the contained data")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectDefinition projectDefinition = (ProjectDefinition) o;
    return Objects.equals(this.projectKind, projectDefinition.projectKind) &&
        Objects.equals(this.name, projectDefinition.name) &&
        Objects.equals(this.description, projectDefinition.description) &&
        Objects.equals(this.properties, projectDefinition.properties) &&
        Objects.equals(this.locale, projectDefinition.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectKind, name, description, properties, locale);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectDefinition {\n");
    
    sb.append("    projectKind: ").append(toIndentedString(projectKind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

